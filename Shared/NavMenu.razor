@using cosmoschat.Data
@inject ChatService chatService
@inject NavigationManager UriHelper

<!--
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">cosmos-chatgpt</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>
-->


@if (chatSessions != null)
{
 
    <div class="h-100 d-flex flex-column">

        <div class="flex-column top-row navbar navbar-dark">
		    <div class="container-fluid">
			    <a class="navbar-brand" href="">cosmos-chatgpt</a>				
		    </div>
	    </div>
        <div class="sidebar flex-grow-1 flex-column justify-content-center overflow-auto">

            <div>
                <nav class="flex-column">
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" Match="NavLinkMatch.All" @onclick="@(e => NewChat())">
                            <span class="oi oi-plus" aria-hidden="true"></span> New Chat
                        </NavLink>
                    </div>
                </nav>
             </div>
            <div class="vstack gap-3 px-3">

                @foreach (var session in chatSessions)
                {
                    <div class="btn @highlightActiveChat(session.ChatSessionId)">

                        <div class="w-100 p-1" style="text-align:left ">
                            <a @onclick="@(e => LoadChat(session.ChatSessionId,session.ChatSessionName))">
                                    <span class="oi oi-document" aria-hidden="true"></span>
                                    <span title="@session.ChatSessionName"> @SafeSubstring(session.ChatSessionName,20) </span>
                                </a>
                            </div>
                            <div style="text-align:right ;width:100%">
                                <a @onclick="@(e => OpenInput(session.ChatSessionId,session.ChatSessionName))">
                                <i class="bi bi-pencil-fill"></i>
                                   <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16">
                                        <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z" />
                                    </svg>
                                </a>
                            &nbsp;&nbsp;
                                <a @onclick="@(e => OpenConfirmation(session.ChatSessionId,session.ChatSessionName))">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" viewBox="0 0 16 16">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                    </svg>
                                </a>
                            </div>
                        
                        </div>

                     }

                   @LoadChat(idOpenSession,nameOpenSession);
            </div>
        </div>
    </div>

}



@if (ConfirmationIsOpen)
{
    <Confirmation Caption="Delete an chat"
        Message="@message"
        OnClose="@OnConfirmationClose"
        Type="Confirmation.Category.DeleteNot">
    </Confirmation>
}



@if (InputIsOpen)
{
    <Input Caption="Rename an chat"
              Value="@message"
              OnClose="@OnInputClose" >
    </Input>
}



@code {

    private string idOpenSession;
    private string nameOpenSession;

    private string idSession;
    private string message;
    private bool ConfirmationIsOpen = false;

    private void OpenConfirmation(string id, string title)
    {
        ConfirmationIsOpen = true;
        idSession = id;
        message = "Do you want to delete the chat \""
                  + title + "\"?";
    }
    private async Task OnConfirmationClose(bool isOk)
    {
        if (isOk)
        {
            ConfirmationIsOpen = false;
            await chatService.DeleteChatSessionAsync(idSession);

            if (chatSessions != null & chatSessions.Count > 0)
            {
                idOpenSession = chatSessions.FirstOrDefault().ChatSessionId;
                nameOpenSession = chatSessions.FirstOrDefault().ChatSessionName;
            }
            else
            {
                idOpenSession = "";
                nameOpenSession = "";
            }
        }
        ConfirmationIsOpen = false;
    }

    private bool InputIsOpen = false;

    private void OpenInput(string id, string title)
    {
        InputIsOpen = true;
        idSession = id;
        message = title;
    }
    private async Task OnInputClose(string newName)
    {
        if (newName!="")
        {
            await chatService.RenameChatSessionAsync(idSession,newName);

        }
        InputIsOpen = false;
    }

    private async Task NewChat()
    {
        await chatService.CreateNewChatSessionAsync();
    }


    List<ChatSession> chatSessions;

    protected override async Task OnParametersSetAsync()
    {

        chatSessions = await chatService.GetAllChatSessionsAsync();
        if (chatSessions != null & chatSessions.Count>0)
        {
            idOpenSession = chatSessions.FirstOrDefault().ChatSessionId;
            nameOpenSession = chatSessions.FirstOrDefault().ChatSessionName;
        }

    }



    private int LoadChat(string sessionId, string sessionName)
    {
        if (chatSessions.Count > 0)
        {
            idOpenSession = sessionId;
            nameOpenSession = sessionName;
            if (sessionId!=null & sessionId != "" & sessionName != "")
                    UriHelper.NavigateTo($"showchat/{sessionId}/{sessionName}");
        }
        else
        {
            UriHelper.NavigateTo($"nochatsavailable/404");
        }
        return 0;
    }

    private string highlightActiveChat(string sessionId)
    {
        if (sessionId != idOpenSession)
            return "btn-primary";
        else
            return "btn-info";
    }

    public string SafeSubstring(string text, int maxLength)
    {
        
        return text.Length > maxLength ? text.Substring(0, maxLength)+"..." : text;
    }

}

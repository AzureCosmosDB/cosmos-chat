@page "/showchat/{chatSessionId}/{chatSessionName}"
@page "/nochatsavailable/{chatSessionId}"
@page "/"

@using Microsoft.AspNetCore.SignalR.Client;
@using cosmoschat.Data
@using Newtonsoft.Json

@inject ChatService chatService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

<PageTitle>Chat Messages</PageTitle>

<div class="h-100 d-flex flex-column overflow-hidden">
	<!--Header Row-->
    <div class="flex-column bg-light">
        
        <div class="p-2 d-flex flex-row" style="height:55px">
            <div class="flex-row justify-content-center flex-grow-1">
                <h4 class="text-dark py-2">@GetChatSessionName()</h4>
            </div>
            <div style="min-width:125px">
                <select @onchange="@((e) => { Sender=(string)e.Value;})" placeholder="Sender" class="m-0 w-full border-0 bg-transparent p-0 pl-2 pr-7" style="height:24px; min-width:25px">
                    @if (Participants != null)
                    {
                        @foreach (var sender in Participants)
                        {
                            <option value="@sender.Key">@sender.Value</option>
                        }
                    }
                </select>

                <span class="oi oi-person me-2" aria-hidden="true"></span>
            </div>
        </div>



	 </div>
	<!--Content Row-->
    <div class="flex-column justify-content-center p-4 flex-grow-1 overflow-auto" id="chatmessagesdiv">
        @if (ChatSessionId=="404")
        {
            <div class="alert alert-primary mt-4">
                <span class="oi oi-lightbulb me-2" aria-hidden="true"></span>
                <strong>No Chats Available</strong>

                <span class="text-nowrap">
                    Use the New Chat option to start a new chat.
                </span>
            </div>
        }
        else
        {
            if (MessagesInChat == null || LoadingComplete==false)
            {
               <div class="alert alert-info mt-4">
                    <span class="oi oi-data-transfer-download me-2" aria-hidden="true"></span>
                    Please wait while your chat loads.
            </div>
            }
            else
            {
                if (MessagesInChat.Count == 0)
                {
                    <div class="alert alert-info mt-4">
                        <span class="oi oi-envelope-open me-2" aria-hidden="true"></span>
                        <span class="text-nowrap">
                            This chat has no messages.
                        </span>
                    </div>
                }
                else
                {
                    @foreach (var msg in MessagesInChat)
                    {

                        <p class="text-primary">
                            <b> @Participants[msg.Sender] </b> &nbsp;&nbsp;&nbsp;<span class="small">@msg.TimeStamp</span>
                            <p>@msg.Text</p>
                        </p>

                    }
                }
            }
        }
            			
	</div>
		<!--Prompt Input Row-->
    <div class="@GetPromptVisibility() flex-column justify-content-center px-4" style="min-height:75px">
		 <div style="padding:10px" class="border border-secondary rounded" >

            <input type="text" @bind="@MessageText" @onkeydown="@OnEnter" @oninput="@((e) => { MessageText=(string)e.Value;})" rows="1" placeholder="Prompt comes here" class="m-0 w-full border-0 bg-transparent p-0 pl-2 pr-7"
            style="height:24px; overflow-y: hidden; width:calc(100% - 25px);resize: none"></input>
            <a style="cursor:pointer" @onclick="PostMessage">
                <span class="oi oi-share" aria-hidden="true"></span>
            </a>
        </div>	
	</div>				
</div>

@code {


    [Parameter]
    public string ChatSessionId { get; set; }
    [Parameter]
    public string ChatSessionName { get; set; }


    // list of messages in chat
    private List<ChatRow> MessagesInChat = new List<ChatRow>();

    private string Sender { get; set; }
    private string MessageText { get; set; } 

    private Dictionary<string, string> Participants = new Dictionary<string, string>();

    private string HubUrl;
    private HubConnection ChatHubConnection;

    private bool LoadingComplete;


    public async Task ConnectSignalR()
    {
        //close any existing connections
        if (ChatHubConnection != null)
        {
            await ChatHubConnection.StopAsync();
            await ChatHubConnection.DisposeAsync();
        }


        //remove old messages if any
        MessagesInChat.Clear();

        // Create the chat client
        string baseUrl = navigationManager.BaseUri;

        HubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl ;

        ChatHubConnection = new HubConnectionBuilder()
            .WithUrl(HubUrl)
            .Build();

        ChatHubConnection.On<string, string>("BroadcastMessage", ReceiveBroadcastedMessage);

        await ChatHubConnection.StartAsync();

    }

    private void ReceiveBroadcastedMessage(string chatSessionId, string messageJSON)
    {
        if (chatSessionId == ChatSessionId)
        {
            var msg = JsonConvert.DeserializeObject<ChatRow>(messageJSON);
            MessagesInChat.Add(msg);

            // Inform blazor the UI needs updating
            InvokeAsync(StateHasChanged);
        }

    }

    //private async Task DisconnectAsync()
    //{
    //    if (_isChatting)
    //    {
    //        await SendMessageAsync($"[Notice] {_username} left chat room.");

    //        await ChatHubConnection.StopAsync();
    //        await ChatHubConnection.DisposeAsync();

    //        ChatHubConnection = null;
    //        _isChatting = false;
    //    }
    //}



    public void OnEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            PostMessage();
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (ChatSessionId != "404" & ChatSessionId!=null)
        {
            await ConnectSignalR();

            List<ChatMessage> ArchivedChatMessages = await chatService.GetChatSessionMessagesAsync(ChatSessionId);
            foreach (var msg in ArchivedChatMessages)
            {
                MessagesInChat.Add(new ChatRow(msg.Sender, msg.Text, msg.TimeStamp));
            }

            Participants = await chatService.GetAllChatParticipants();

            Sender = Participants.ElementAt(0).Key;

            LoadingComplete = true;
        }
 
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollLastChatToViewAsync();
    }
    
       
    private void PostMessage()
    {
        if (ChatSessionId == "404" || MessageText == "" || MessageText==null)
            return;

        string tempPrompt = MessageText;
        if (MessageText!="")
        {           
            MessageText = "";

        }
        Task.Run(async () => await SendMessageAsync(tempPrompt));
    }
    private async Task SendMessageAsync(string messagetext)
    {
        var chatMessage = await chatService.AddChatMessageAsync(ChatSessionId, Sender, messagetext);
        await ChatHubConnection.SendAsync("BroadcastMessage", chatMessage.ChatSessionId, chatMessage.Sender, chatMessage.Text,chatMessage.TimeStamp);
       
    }

    private async Task ScrollLastChatToViewAsync()
    {
        await JSRuntime.InvokeAsync<bool>("scrollToLastMessage");
    }

    private string GetChatSessionName()
    {
        if (ChatSessionId == "404")
            return "";
        else
            return ChatSessionName;
    }

    private string GetPromptVisibility()
    {
        if (ChatSessionId == "404" || ChatSessionId == null || LoadingComplete==false)
            return "invisible";
        else
            return "";
    }

}